term2 = as.numeric(exp(-(log(u)-beta0-t(beta)%*%mu)^2/(2*t(beta)%*%cov%*%beta)))
return(1/(theta*nu*u^(1/nu))*as.numeric(gammainc( u*theta^nu,1/nu)[1])*term1*term2)}
return(integrate(Vectorize(cens),lower =0.01,upper =Inf,subdivisions=100,stop.on.error = FALSE)$value - tau)}
tau
cens_int(1)
theta=1
cens = function(u){
term1 = (1/(u*sqrt(2*pi)*sqrt(t(beta)%*%cov%*%beta)))
term2 = as.numeric(exp(-(log(u)-beta0-t(beta)%*%mu)^2/(2*t(beta)%*%cov%*%beta)))
return(1/(theta*nu*u^(1/nu))*as.numeric(gammainc( u*theta^nu,1/nu)[1])*term1*term2)}
cens(1)
cens(100)
cens(1000)
cens_int = function(theta){
cens = function(u){
term1 = (1/(u*sqrt(2*pi)*sqrt(t(beta)%*%cov%*%beta)))
term2 = as.numeric(exp(-(log(u)-beta0-t(beta)%*%mu)^2/(2*t(beta)%*%cov%*%beta)))
return(1/(theta*nu*u^(1/nu))*as.numeric(gammainc( u*theta^nu,1/nu)[1])*term1*term2)}
return(integrate(Vectorize(cens),lower =0.01,upper =100,subdivisions=100,stop.on.error = FALSE)$value - tau)}
cens_int(1)
cens_int(10)
theta=10
cens = function(u){
term1 = (1/(u*sqrt(2*pi)*sqrt(t(beta)%*%cov%*%beta)))
term2 = as.numeric(exp(-(log(u)-beta0-t(beta)%*%mu)^2/(2*t(beta)%*%cov%*%beta)))
return(1/(theta*nu*u^(1/nu))*as.numeric(gammainc( u*theta^nu,1/nu)[1])*term1*term2)}
cens(1)
cens(10)
cens(100)
cens(11)
cens(20)
cens(100)
cens(50)
cens(80)
u=80
u*theta^nu
1/nu
gammainc( u*theta^nu,1/nu)
gammainc(80,1)
u*theta^nu
gammainc(800,1)
gammainc(Inf,1)
gammainc(700,1)
gammainc(701,1)
gammainc(800,1)
gammainc(199,1)
gammainc(799,1)
gammainc(750,1)
cens_int = function(theta){
cens = function(u){
term1 = (1/(u*sqrt(2*pi)*sqrt(t(beta)%*%cov%*%beta)))
term2 = as.numeric(exp(-(log(u)-beta0-t(beta)%*%mu)^2/(2*t(beta)%*%cov%*%beta)))
return(1/(theta*nu*u^(1/nu))*as.numeric(gammainc( u*theta^nu,1/nu)[1])*term1*term2)}
return(integrate(Vectorize(cens),lower =0.01,upper =100,subdivisions=100,stop.on.error = FALSE)$value - tau)}
theta = uniroot(cens_int,interval = c(0.01,10))$root
cens_int = function(theta){
cens = function(u){
term1 = (1/(u*sqrt(2*pi)*sqrt(t(beta)%*%cov%*%beta)))
term2 = as.numeric(exp(-(log(u)-beta0-t(beta)%*%mu)^2/(2*t(beta)%*%cov%*%beta)))
return(1/(theta*nu*u^(1/nu))*as.numeric(gammainc( u*theta^nu,1/nu)[1])*term1*term2)}
return(integrate(Vectorize(cens),lower =0.01,upper =10,subdivisions=100,stop.on.error = FALSE)$value - tau)}
theta = uniroot(cens_int,interval = c(0.01,10))$root
cens_int = function(theta){
cens = function(u){
term1 = (1/(u*sqrt(2*pi)*sqrt(t(beta)%*%cov%*%beta)))
term2 = as.numeric(exp(-(log(u)-beta0-t(beta)%*%mu)^2/(2*t(beta)%*%cov%*%beta)))
return(1/(theta*nu*u^(1/nu))*as.numeric(gammainc( u*theta^nu,1/nu)[1])*term1*term2)}
return(integrate(Vectorize(cens),lower =0.01,upper =10,subdivisions=100,stop.on.error = FALSE)$value - tau)}
theta = uniroot(cens_int,interval = c(0.01,10))$root
theta
max(lambda_x)
maxu= max(lambda_x)
cens_int = function(theta){
cens = function(u){
term1 = (1/(u*sqrt(2*pi)*sqrt(t(beta)%*%cov%*%beta)))
term2 = as.numeric(exp(-(log(u)-beta0-t(beta)%*%mu)^2/(2*t(beta)%*%cov%*%beta)))
return(1/(theta*nu*u^(1/nu))*as.numeric(gammainc( u*theta^nu,1/nu)[1])*term1*term2)}
return(integrate(Vectorize(cens),lower =0.01,upper =maxu,subdivisions=100,stop.on.error = FALSE)$value - tau)}
theta = uniroot(cens_int,interval = c(0.01,20))$root
theta
maxu= max(lambda_x)
cens_int = function(theta){
cens = function(u){
term1 = (1/(u*sqrt(2*pi)*sqrt(t(beta)%*%cov%*%beta)))
term2 = as.numeric(exp(-(log(u)-beta0-t(beta)%*%mu)^2/(2*t(beta)%*%cov%*%beta)))
return(1/(theta*nu*u^(1/nu))*as.numeric(gammainc( u*theta^nu,1/nu)[1])*term1*term2)}
return(integrate(Vectorize(cens),lower =0.01,upper =maxu,subdivisions=100,stop.on.error = FALSE)$value - tau)}
theta = uniroot(cens_int,interval = c(0.01,20))$root
return(theta)}
cens_int = function(theta){
cens = function(u){
term1 = (1/(u*sqrt(2*pi)*sqrt(t(beta)%*%cov%*%beta)))
term2 = as.numeric(exp(-(log(u)-beta0-t(beta)%*%mu)^2/(2*t(beta)%*%cov%*%beta)))
return(1/(theta*nu*u^(1/nu))*as.numeric(gammainc( u*theta^nu,1/nu)[1])*term1*term2)}
return(integrate(Vectorize(cens),lower =0.01,upper =maxu,subdivisions=100,stop.on.error = FALSE)$value - tau)}
theta = uniroot(cens_int,interval = c(0.01,20))$root
C = runif(n,theta)
To=pmin(T,C)
delta=as.integer(T==To)
theta
theta = uniroot(cens_int,interval = c(0.01,20))$root
C = runif(n,0,theta)
To=pmin(T,C)
delta=as.integer(T==To)
table(delta)
42/(42+ 158)
library(mvtnorm)
library(pracma)
# calculer le param√®tre theta avant chaque senario
censoring_param = function(nu,tau=0.2){
# tau censoring parameter
cens_int = function(theta){
cens = function(u){(1/(theta*nu*u^(1/nu)))*gammainc(1/nu, u*theta)[1]}
return(integrate(Vectorize(cens),lower =0.01,upper =theta,subdivisions=100,stop.on.error = FALSE)$value - tau)}
theta = uniroot(cens_int,interval = c(0.01,50))$root
return(theta)
}
data_gen = function(n=200,p=100,a=0,rho=0.7,sr=0.5,b=1,beta0=0,
m1 =12,m0 = 10,nu=1,tau = 0.2 ){
# n sample size
# p number of covariates
# a mean of covariates
# rho parameter of covariance matrice
# sr proportion of active variables
# m1 the  median survival for an increase of one unit in an active covariate
# m0 the desired baseline median survival
# beta0 parameter beta0
# b coefficients of active variables
# tau censoring rate
b = log((m0/m1)^nu)
p_a = round(sr * p)
p_na= p - p_a
cov_a = diag(1,p_a)
for (i in (1:p_a)){
for (j in (1:p_a)){
cov_a[i,j] = rho^(abs(j-i))
}}
cov_na = diag(1,p_na)
for (i in (1:p_na)){
for (j in (1:p_na)){
cov_na[i,j] = rho^(abs((j-i)))
}}
X_a = rmvnorm(n, mean=rep(a,p_a), sigma = cov_a)
X_na = rmvnorm(n, mean=rep(a,p_na), sigma = cov_na)
X = cbind(X_a,X_na)
lambda_x = exp(beta0)*exp(X_a[,1:p_a]%*%rep(b,p_a))
U = runif(n)
T = (-log(U)/lambda_x)^(1/nu)
beta = c(rep(b,p_a),rep(0,p_na))
mu = rep(a,p)
cov1 = cbind(cov_a,matrix(0,p_a,p_na))
cov2 = cbind(matrix(0,p_na,p_a),cov_na)
cov = rbind(cov1,cov2)
maxu= max(lambda_x)
cens_int = function(theta){
cens = function(u){
term1 = (1/(u*sqrt(2*pi)*sqrt(t(beta)%*%cov%*%beta)))
term2 = as.numeric(exp(-(log(u)-beta0-t(beta)%*%mu)^2/(2*t(beta)%*%cov%*%beta)))
return(1/(theta*nu*u^(1/nu))*as.numeric(gammainc( u*theta^nu,1/nu)[1])*term1*term2)}
return(integrate(Vectorize(cens),lower =0.01,upper =maxu,subdivisions=100,stop.on.error = FALSE)$value - tau)}
theta = uniroot(cens_int,interval = c(0.01,20))$root
C = runif(n,0,theta)
To=pmin(T,C)
delta=as.integer(T==To)
return(list(To=To,delta=delta,X=X))
}
setwd("~/survie_grande_dimension")
source("function_data_gen.R")
data = data_gen(n=200,p=100,a=0,rho=0.7,sr=0.5,b=1,beta0=0,                    m1 =12,m0 = 10,nu=1,tau = 0.2 )
n=20;,p=100;a=0;rho=0.7;sr=0.5;b=1;beta0=0;
n=20;p=100;a=0;rho=0.7;sr=0.5;b=1;beta0=0;
m1 =12;m0 = 10;nu=1;tau = 0.2
b = log((m0/m1)^nu)
p_a = round(sr * p)
p_na= p - p_a
cov_a = diag(1,p_a)
for (i in (1:p_a)){
for (j in (1:p_a)){
cov_a[i,j] = rho^(abs(j-i))
}}
cov_na = diag(1,p_na)
for (i in (1:p_na)){
for (j in (1:p_na)){
cov_na[i,j] = rho^(abs((j-i)))
}}
X_a = rmvnorm(n, mean=rep(a,p_a), sigma = cov_a)
X_na = rmvnorm(n, mean=rep(a,p_na), sigma = cov_na)
X = cbind(X_a,X_na)
lambda_x = exp(beta0)*exp(X_a[,1:p_a]%*%rep(b,p_a))
U = runif(n)
T = (-log(U)/lambda_x)^(1/nu)
beta = c(rep(b,p_a),rep(0,p_na))
mu = rep(a,p)
cov1 = cbind(cov_a,matrix(0,p_a,p_na))
cov2 = cbind(matrix(0,p_na,p_a),cov_na)
cov = rbind(cov1,cov2)
maxu= max(lambda_x)
cens_int = function(theta){
b = log((m0/m1)^nu)
p_a = round(sr * p)
p_na= p - p_a
cov_a = diag(1,p_a)
for (i in (1:p_a)){
for (j in (1:p_a)){
cov_a[i,j] = rho^(abs(j-i))
}}
cov_na = diag(1,p_na)
for (i in (1:p_na)){
for (j in (1:p_na)){
cov_na[i,j] = rho^(abs((j-i)))
}}
X_a = rmvnorm(n, mean=rep(a,p_a), sigma = cov_a)
X_na = rmvnorm(n, mean=rep(a,p_na), sigma = cov_na)
X = cbind(X_a,X_na)
lambda_x = exp(beta0)*exp(X_a[,1:p_a]%*%rep(b,p_a))
U = runif(n)
T = (-log(U)/lambda_x)^(1/nu)
beta = c(rep(b,p_a),rep(0,p_na))
mu = rep(a,p)
cov1 = cbind(cov_a,matrix(0,p_a,p_na))
cov2 = cbind(matrix(0,p_na,p_a),cov_na)
cov = rbind(cov1,cov2)
maxu= max(lambda_x)
cens_int = function(theta){
cens = function(u){
term1 = (1/(u*sqrt(2*pi)*sqrt(t(beta)%*%cov%*%beta)))
term2 = as.numeric(exp(-(log(u)-beta0-t(beta)%*%mu)^2/(2*t(beta)%*%cov%*%beta)))
return(1/(theta*nu*u^(1/nu))*as.numeric(gammainc( u*theta^nu,1/nu)[1])*term1*term2)}
return(integrate(Vectorize(cens),lower =0.01,upper =maxu,subdivisions=100,stop.on.error = FALSE)$value - tau)}
theta = uniroot(cens_int,interval = c(0.01,20))$root
max(# Mon Mar  4 12:46:24 2024 ------------------------------
)
max(T)
T
max(T)
theta = uniroot(cens_int,interval = c(0.01,20))$root
theta = uniroot(cens_int,interval = c(0.01,10))$root
theta = uniroot(cens_int,interval = c(0.01,15))$root
m1 =10.5
b = log((m0/m1)^nu)
p_a = round(sr * p)
p_na= p - p_a
cov_a = diag(1,p_a)
for (i in (1:p_a)){
for (j in (1:p_a)){
cov_a[i,j] = rho^(abs(j-i))
}}
cov_na = diag(1,p_na)
for (i in (1:p_na)){
for (j in (1:p_na)){
cov_na[i,j] = rho^(abs((j-i)))
}}
X_a = rmvnorm(n, mean=rep(a,p_a), sigma = cov_a)
X_na = rmvnorm(n, mean=rep(a,p_na), sigma = cov_na)
X = cbind(X_a,X_na)
lambda_x = exp(beta0)*exp(X_a[,1:p_a]%*%rep(b,p_a))
U = runif(n)
T = (-log(U)/lambda_x)^(1/nu)
beta = c(rep(b,p_a),rep(0,p_na))
mu = rep(a,p)
cov1 = cbind(cov_a,matrix(0,p_a,p_na))
cov2 = cbind(matrix(0,p_na,p_a),cov_na)
cov = rbind(cov1,cov2)
maxu= max(lambda_x)
cens_int = function(theta){
cens = function(u){
term1 = (1/(u*sqrt(2*pi)*sqrt(t(beta)%*%cov%*%beta)))
term2 = as.numeric(exp(-(log(u)-beta0-t(beta)%*%mu)^2/(2*t(beta)%*%cov%*%beta)))
return(1/(theta*nu*u^(1/nu))*as.numeric(gammainc( u*theta^nu,1/nu)[1])*term1*term2)}
return(integrate(Vectorize(cens),lower =0.01,upper =maxu,subdivisions=100,stop.on.error = FALSE)$value - tau)}
cens_int = function(theta){
cens = function(u){
term1 = (1/(u*sqrt(2*pi)*sqrt(t(beta)%*%cov%*%beta)))
term2 = as.numeric(exp(-(log(u)-beta0-p_a*a*b)^2/(2*t(beta)%*%cov%*%beta)))
return(1/(theta*nu*u^(1/nu))*as.numeric(gammainc( u*theta^nu,1/nu)[1])*term1*term2)}
return(integrate(Vectorize(cens),lower =0.01,upper =maxu,subdivisions=100,stop.on.error = FALSE)$value - tau)}
theta = uniroot(cens_int,interval = c(0.01,15))$root
theta
max(T)
source("function_data_gen.R")
source("function_data_gen.R")
# calculer le param√®tre theta avant chaque senario
data = data_gen(n=200,p=100,a=0,rho=0.7,sr=0.5,b=1,beta0=0,                    m1 =12,m0 = 10,nu=1,tau = 0.2 )
# calculer le param√®tre theta avant chaque senario
data = data_gen(n=200,p=100,a=0,rho=0.7,sr=0.5,b=1,beta0=0,                    m1 =10.5,m0 = 10,nu=1,tau = 0.2 )
scenarios1=NULL
for (i in 1:length(tauvac)){
scenarios1=rbind(scenarios1,c(nrep,n,p,a,rho,sr,b,beta0,m1,m0,nu,tauvec[i]))
}
scenarios1=NULL
for (i in 1:length(tauvec)){
scenarios1=rbind(scenarios1,c(nrep,n,p,a,rho,sr,b,beta0,m1,m0,nu,tauvec[i]))
}
n=200
p=100
a=0
rho=0.7
sr=0.5
b=1
beta0=0
m1 =10.5
m0 = 10
nu=1
tauvec = c(0.2,0.4,0.6)
nrep=1  # number of repetitions
scenarios1=NULL
for (i in 1:length(tauvec)){
scenarios1=rbind(scenarios1,c(nrep,n,p,a,rho,sr,b,beta0,m1,m0,nu,tauvec[i]))
}
colnames(scenarios1)=c("nrep","n","p","a","rho","sr","b","beta0",
"m1","m0","nu","tauvec")
scenarios1=data.frame(scenarios1)
scenarios1
install.packages("randomForestSRC")
install.packages("CoxBoost")
library(randomForestSRC)
risk = function(t,lambda,nu){
return(lambda* nu*t^{nu-1})
}
RISK_c = function(t,lambda,nu){
return(lambda*t^{nu})
}
survie = function(t,lambda,nu){
return(exp(-lambda*t^{nu}))
}
dens = function(t,lambda,nu){
return(lambda* nu*t^{nu-1}*exp(-lambda*t^{nu}))
}
n=200
p=100
a=0
rho=0.7
sr=0.5
b=1
beta0=0
m1 =10.5
m0 = 10
nu=1
tauvec = c(0.2,0.4,0.6)
nrep=1  # number of repetitions
scenarios=NULL
for (i in 1:length(tauvec)){
scenarios=rbind(scenarios,c(nrep,n,p,a,rho,sr,b,beta0,m1,m0,nu,tauvec[i]))
}
colnames(scenarios)=c("nrep","n","p","a","rho","sr","b","beta0",
"m1","m0","nu","tau")
scenarios=data.frame(scenarios)
i=1
nrep=scenarios[i,1]
nsample=scenarios[i,2]
psample=scenarios[i,3]
asample=scenarios[i,4]
rhosample=scenarios[i,5]
srsample=scenarios[i,6]
bsample=scenarios[i,7]
beta0sample=scenarios[i,8]
m1sample=scenarios[i,9]
m0sample=scenarios[i,10]
nusample=scenarios[i,11]
tausample=scenarios[i,12]
flnameEst = "results"
flname=paste0("./Results/",flnameEst,"_",
"nrep=",nrep,"_",
"n=",nsample,"_",
"p=",psample,"_",
"a=",asample,"_",
"rho=",rhosample,"_",
"sr=",srsample,"_",
"b=",bsample,"_",
"beta0=",beta0sample,"_",
"m1=",m1sample,"_",
"m0=",m0sample,"_",
"nu=",nusample,"_",
"tau=",tausample,"_",
".RData")
source("function_data_gen.R")
source("utils")
source("function_data_gen.R")
source("utils")
source("function_data_gen.R")
source("utils.R")
data = data_gen(n=1000,p=100,a=0,rho=0.7,sr=0.5,b=1,beta0=0,                    m1 =10.5,m0 = 10,nu=1,tau = 0.2 )
p=100
a=0
rho=0.7
sr=0.5
b=1
beta0=0
m1 =10.5
m0 = 10
nu=1
tau = 0.2
data = data_gen(n,p,a,rho,sr,b,beta0,m1,m0,nu,tau)
To= data$To
delta =data$delta
X =data$X
b = log((m0/m1)^nu)
p_a = round(sr * p)
p_na= p - p_a
lambda_x = exp(beta0)*exp(X[,1:p_a]%*%rep(b,p_a))
HarrelC_index_risk = function(m,To,delta,lambdax,nu){
num = 0
denom = 0
for (i in(1:length(m))){
for (j in(1:length(m))){
if (j != i){
if ( (To[i]>To[j]) & (risk(To[j],lambda_x[i],nu)<risk(To[j],lambda_x[j],nu)) & (delta[j]==1)) {num = 1}
if ( (To[i]>To[j]) &  (delta[j]==1)) {denom = 1}
}
}
}
return(num/denom)}
HarrelC_index_risk = function(To,delta,lambdax,nu){
num = 0
denom = 0
for (i in(1:length(m))){
for (j in(1:length(m))){
if (j != i){
if ( (To[i]>To[j]) & (risk(To[j],lambda_x[i],nu)<risk(To[j],lambda_x[j],nu)) & (delta[j]==1)) {num = 1}
if ( (To[i]>To[j]) &  (delta[j]==1)) {denom = 1}
}
}
}
return(num/denom)}
HarrelC_index_risk(To,delta,lambdax,nu)
HarrelC_index_risk = function(To,delta,lambdax,nu){
num = 0
denom = 0
for (i in(1:length(To))){
for (j in(1:length(To))){
if (j != i){
if ( (To[i]>To[j]) & (risk(To[j],lambda_x[i],nu)<risk(To[j],lambda_x[j],nu)) & (delta[j]==1)) {num = 1}
if ( (To[i]>To[j]) &  (delta[j]==1)) {denom = 1}
}
}
}
return(num/denom)}
HarrelC_index_risk(To,delta,lambdax,nu)
tau = max(To)
HarrelC_index_risk(To,delta,lambda_x,nu)
m = numeric(n)
for (i in (1:n)){m[i] = survie(tau,lambda_x[i],nu)}
HarrelC_index(m,To,delta)
risk = function(t,lambda,nu){
return(lambda* nu*t^{nu-1})
}
RISK_c = function(t,lambda,nu){
return(lambda*t^{nu})
}
survie = function(t,lambda,nu){
return(exp(-lambda*t^{nu}))
}
dens = function(t,lambda,nu){
return(lambda* nu*t^{nu-1}*exp(-lambda*t^{nu}))
}
HarrelC_index = function(m,To,delta){
num = 0
denom = 0
for (i in(1:length(m))){
for (j in(1:length(m))){
if (j != i){
if ( (To[i]>To[j]) & (m[i]<m[j]) & (delta[j]==1)) {num = 1}
if ( (To[i]>To[j]) &  (delta[j]==1)) {denom = 1}
}
}
}
return(num/denom)}
HarrelC_index_risk = function(To,delta,lambdax,nu){
num = 0
denom = 0
for (i in(1:length(To))){
for (j in(1:length(To))){
if (j != i){
if ( (To[i]>To[j]) & (risk(To[j],lambda_x[i],nu)<risk(To[j],lambda_x[j],nu)) & (delta[j]==1)) {num = 1}
if ( (To[i]>To[j]) &  (delta[j]==1)) {denom = 1}
}
}
}
return(num/denom)}
m = numeric(n)
for (i in (1:n)){m[i] = survie(tau,lambda_x[i],nu)}
HarrelC_index(m,To,delta)
library(randomForestSRC)
install.packages("randomForestSRC")
install.packages("randomForestSRC")
library(randomForestSRC)
source("function_data_gen.R")
source("utils.R")
# calculer le param√®tre theta avant chaque senario
data = data_gen(n=200,p=100,a=0,rho=0.7,sr=0.5,b=1,beta0=0,                    m1 =10.5,m0 = 10,nu=1,tau = 0.2 )
To= data$To
delta =data$delta
X =data$X
library(randomForestSRC)
source("function_data_gen.R")
source("utils.R")
# calculer le param√®tre theta avant chaque senario
data = data_gen(n=200,p=100,a=0,rho=0.7,sr=0.5,b=1,beta0=0,                    m1 =10.5,m0 = 10,nu=1,tau = 0.2 )
To= data$To
delta =data$delta
X =data$X
library(randomForestSRC)
library(CoxBoost)
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
